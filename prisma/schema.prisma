// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id              String               @id @default(cuid())
  googleId        String?              @unique
  accessToken     String?              @db.Text
  refreshToken    String?              @db.Text
  name            String
  email           String               @unique
  image           String?
  password        String?
  sessions        Session[]
  createdTasks    Task[]
  createdProjects Project[]            @relation("CreatedProjects")
  projects        Project[]            @relation("UserProjects")
  sentMessages    Message[]            @relation("MessageSender")
  conversations   Conversation[]       @relation("ConversationParticipants")
  role            String               @default("User")
  associations    Json?
  isVerified      Boolean              @default(false)
  EmailCodes      EmailCodes?          @relation("verification code")
  resetToken      PasswordResetTokens? @relation("resetToken")
  deviceFcmToken  String?
  seenMessages    MessageSeenBy[]      @relation("UserSeenMessages")
  upgraded  Boolean @default(false)
  UpgradedUsers UpgradedUsers? @relation("upgrade")
}

model EmailCodes {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation("verification code", fields: [userId], references: [id])
  code      String
  email     String?
  expiresAt DateTime
}

model PasswordResetTokens {
  id        String   @id @default(cuid())
  token     String
  userId    String   @unique
  user      User     @relation("resetToken", fields: [userId], references: [id])
  expiresAt DateTime
}

model Task {
  id                    Int       @id @default(autoincrement())
  title                 String
  description           String
  completed             Boolean   @default(false)
  createdAt             DateTime  @default(now())
  imagePath             String?
  urgency               String?   @default("normal")
  createdById           String?
  createdBy             User?     @relation(fields: [createdById], references: [id], onDelete: SetNull)
  instructions          Json?
  audioPath             String?
  startsAt              DateTime?
  endsAt                DateTime?
  deadline              DateTime?
  projectId             Int?
  project               Project?  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  emailNotificationSent Boolean   @default(false)
  googleCalendar        Boolean   @default(false)
}

model Project {
  id             Int       @id @default(autoincrement())
  title          String
  description    String
  tasks          Task[]
  completed      Boolean   @default(false)
  createdAt      DateTime  @default(now())
  createdById    String?
  createdBy      User?     @relation(fields: [createdById], references: [id], onDelete: SetNull, name: "CreatedProjects")
  users          User[]    @relation("UserProjects")
  startsAt       DateTime?
  endsAt         DateTime?
  googleCalendar Boolean   @default(false)
}

model Message {
  id             Int             @id @default(autoincrement())
  content        String
  sentAt         DateTime        @default(now())
  senderId       String
  sender         User            @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversationId Int
  conversation   Conversation    @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  seenBy         MessageSeenBy[]
}

model MessageSeenBy {
  messageId Int
  userId    String
  seenAt    DateTime? @default(now())
  message   Message  @relation(fields: [messageId], references: [id])
  user      User     @relation("UserSeenMessages", fields: [userId], references: [id])

  @@id([messageId, userId])
}

model Conversation {
  id           Int       @id @default(autoincrement())
  participants User[]    @relation("ConversationParticipants")
  messages     Message[] @relation("ConversationMessages")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model UpgradedUsers {
  id  Int   @id @default(autoincrement())
  customerId  String
  completedAt DateTime  @default(now())
  orderId String
  userId    String   @unique
  user      User     @relation("upgrade", fields: [userId], references: [id])
  sessionId String
  invoiceUrl  String
}
